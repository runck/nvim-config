###
snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet


### Smart Math Symbol
snippet $ "Math"
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet


### Fraction
snippet frac "Fraction"
\\frac{$1}{$2}$0
endsnippet


### sympy
snippet sympy "sympy block " w
sympyStart $1 sympyEnd$0
endsnippet

priority 9999
snippet 'sympyStart(.*)sympyEnd' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
i, j, k, m, n = symbols('i j k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet


### Dynamic row latex
global !p
def create_row_placeholders(snip):
    # retrieving single line from current string and treat it like tabstops
    placeholders_amount = int(snip.buffer[snip.line].strip())
    # erase current line
    snip.buffer[snip.line] = ''
    # create anonymous snippet with expected content and number of tabstops
    anon_snippet_body = ' & '.join(['$' + str(i+1)
                                    for i in range(placeholders_amount)])
    # expand anonymous snippet
    snip.expand_anon(anon_snippet_body)
endglobal

post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet


# Dynmaic Matrix latex
global !p
def create_matrix_placeholders(snip):
    # Create anonymous snippet body
    anon_snippet_body = ""
    # Get start and end line number of expanded snippet
    start = snip.snippet_start[0]
    end = snip.snippet_end[0]
  # Append current line into anonymous snippet
    for i in range(start, end + 1):
        anon_snippet_body += snip.buffer[i]
        anon_snippet_body += "" if i == end else "\n"
    # # Delete expanded snippet line till second to last line
    for i in range(start, end):
        del snip.buffer[start]
    # # Empty last expanded snippet line while preserving the line
    snip.buffer[start] = ''
    # # Expand anonymous snippet
    snip.expand_anon(anon_snippet_body)

def create_matrix(rows, cols, sep, start, end):
    res = ""
    placeholder = 1
    for _ in range(0, int(rows)):
        res += start + f"${placeholder} "
        placeholder += 1
        for _ in range(0, int(cols) - 1):
            res += sep + f" ${placeholder} "
            placeholder += 1
        res += end
    return res[:-1]
    
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet 'arr(\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p snip.rv = "l"*int(match.group(1))`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet


# # 在数学模式下自动加下标
# context "math()"
# snippet '([A-Za-z])(\d)' "auto subscript" wrA
# `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# endsnippet



# # 根据用户输入新建一个Markdown格式的表格
# snippet '(?<!\\)([0-9])([0-9])tb' "new table" r
# $1`!p 
# x=match.group(1)
# y=match.group(2)
# row1=""
# row2="" 
# for i in range(int(x)):
    # row1+="| "
    # row2+="|:-:"
# row1+="|\n"
# row2+="|\n"
# out=row1+row2+int(y)*row1
# snip.rv=out
# `$0
# endsnippet


# # mk 表示 make Ketax
# snippet mk "Math" wA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    # snip.rv = ' '
# else:
    # snip.rv = ''
# `$2
# endsnippet

# # dm 表示 Display math
# snippet dm "Math" wA
# $$
# ${1:${VISUAL}}
# $$ $0
# endsnippet


